/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'KWON' at '16. 10. 30 오후 7:27' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'war'

compileJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.8
targetCompatibility = 1.8

ext{
	javaVersion = '1.8'
	springVersion = '4.3.3.RELEASE'
	servletVersion = '3.1.0'
	hibernateVersion = '5.2.4.Final'
	tilesVersion = '3.0.7'
}


buildDir = 'build'

eclipse {
	classpath {
		defaultOutputDir = file("${buildDir}/classes/main")
	}
	wtp {
		facet {
			facet name: 'jst.web', version: '3.1'	// 서블릿 버전 지정.
			facet name: 'jst.java', version: '1.8' // 자바 버전 지정.
		}
	}
}

buildDir = 'build'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()	// 메이븐 중앙 저장소를 기본 저장소로 지정.
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
	// https://mvnrepository.com/artifact/javax.servlet/jstl
	compile group: 'javax.servlet', name: 'jstl', version: '1.2'
	// https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
	compile group: 'javax.servlet', name: 'javax.servlet-api', version: "${servletVersion}"
	// https://mvnrepository.com/artifact/org.springframework/spring-webmvc
	compile group: 'org.springframework', name: 'spring-webmvc', version: "${springVersion}"
	// https://mvnrepository.com/artifact/org.springframework/spring-jdbc
	compile group: 'org.springframework', name: 'spring-jdbc', version: "${springVersion}"
	// https://mvnrepository.com/artifact/org.hibernate/hibernate-validator
	compile group: 'org.hibernate', name: 'hibernate-validator', version: "${hibernateVersion}"
	// https://mvnrepository.com/artifact/com.h2database/h2
	compile group: 'com.h2database', name: 'h2', version: '1.4.193'
	// https://mvnrepository.com/artifact/org.apache.tiles/tiles-core
	compile group: 'org.apache.tiles', name: 'tiles-core', version: "${tilesVersion}"
	// https://mvnrepository.com/artifact/org.apache.tiles/tiles-jsp
	compile group: 'org.apache.tiles', name: 'tiles-jsp', version: "${tilesVersion}"
	// https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4
	compile group: 'org.thymeleaf', name: 'thymeleaf-spring4', version: '3.0.2.RELEASE'
	// https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload
	compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.2'
	
	

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
	// https://mvnrepository.com/artifact/org.springframework/spring-test
	testCompile group: 'org.springframework', name: 'spring-test', version: "${springVersion}"
	// https://mvnrepository.com/artifact/org.mockito/mockito-all
	testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
	
	
}